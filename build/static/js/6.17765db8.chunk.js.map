{"version":3,"sources":["../node_modules/antd/es/back-top/style/css.js","../node_modules/antd/es/back-top/index.js","../node_modules/antd/es/_util/getScroll.js","../node_modules/shufflejs/dist/shuffle.esm.js"],"names":["__webpack_require__","d","__webpack_exports__","BackTop","react__WEBPACK_IMPORTED_MODULE_0__","rc_animate__WEBPACK_IMPORTED_MODULE_1__","rc_util_es_Dom_addEventListener__WEBPACK_IMPORTED_MODULE_2__","classnames__WEBPACK_IMPORTED_MODULE_3__","classnames__WEBPACK_IMPORTED_MODULE_3___default","n","omit_js__WEBPACK_IMPORTED_MODULE_4__","raf__WEBPACK_IMPORTED_MODULE_5__","raf__WEBPACK_IMPORTED_MODULE_5___default","_config_provider__WEBPACK_IMPORTED_MODULE_6__","_util_getScroll__WEBPACK_IMPORTED_MODULE_7__","_typeof","obj","Symbol","iterator","constructor","prototype","_extends","Object","assign","target","i","arguments","length","source","key","hasOwnProperty","call","apply","this","_defineProperties","props","descriptor","enumerable","configurable","writable","defineProperty","_possibleConstructorReturn","self","ReferenceError","_assertThisInitialized","_getPrototypeOf","o","setPrototypeOf","getPrototypeOf","__proto__","_setPrototypeOf","p","easeInOutCubic","t","b","c","cc","getDefaultTarget","window","_React$Component","_this","instance","Constructor","TypeError","_classCallCheck","getCurrentScrollTop","targetNode","pageYOffset","document","body","scrollTop","documentElement","scrollToTop","e","startTime","Date","now","frameFunc","time","setScrollTop","onClick","handleScroll","_this$props","visibilityHeight","_this$props$target","setState","visible","renderBackTop","_ref","getPrefixCls","_this$props2","customizePrefixCls","prefixCls","_this$props2$classNam","className","children","classString","defaultElement","concat","divProps","backTopBtn","state","component","transitionName","protoProps","staticProps","subClass","superClass","create","value","_inherits","getTarget","scrollEvent","remove","defaultProps","getScroll","top","method","isWindow","ret","_createClass","E","on","name","callback","ctx","push","fn","once","listener","off","_","emit","data","slice","evtArr","len","evts","liveEvents","tinyEmitter","proto","Element","vendor","matches","matchesSelector","webkitMatchesSelector","mozMatchesSelector","msMatchesSelector","oMatchesSelector","el","selector","nodeType","nodes","parentNode","querySelectorAll","throttleit","func","wait","args","rtn","timeoutID","last","delta","setTimeout","noop","getNumber","parseFloat","Point","x","y","a","Rect","w","h","id","left","width","height","Classes","BASE","SHUFFLE_ITEM","VISIBLE","HIDDEN","id$1","ShuffleItem","element","isVisible","isHidden","classList","add","removeAttribute","setAttribute","addClasses","applyCss","Css","INITIAL","scale","Scale","point","classes","forEach","_this2","_this3","keys","style","removeClasses","position","visibility","will-change","before","opacity","after","transitionDelay","testComputedSize","createElement","cssText","appendChild","getComputedStyle","removeChild","getNumberStyle","styles","undefined","paddingTop","paddingBottom","borderTopWidth","borderBottomWidth","paddingLeft","paddingRight","borderLeftWidth","borderRightWidth","defaults","reverse","by","compare","randomize","sorter","arr","options","opts","original","Array","from","revert","array","Math","floor","random","temp","sort","valA","valB","transitions","eventName","count","cancelTransitionEnd","removeEventListener","onTransitionEnd","evt","currentTarget","addEventListener","arrayMax","max","getColumnSpan","itemWidth","columnWidth","columns","threshold","columnSpan","abs","round","min","ceil","getAvailablePositions","positions","available","getShortColumn","buffer","minPosition","getCenteredPositions","itemRects","containerWidth","rowMap","itemRect","rects","rows","centeredRows","intersectingRect","lastItem","end","offset","finalRects","canMove","newRects","every","r","newRect","noOverlap","some","intersects","rowIndex","findIndex","items","includes","splice","map","arrayUnique","Set","id$2","Shuffle","_TinyEmitter","delimeter","delimiter","lastSort","group","ALL_ITEMS","lastFilter","isEnabled","isDestroyed","isInitialized","_transitions","isTransitioning","_queue","_getElementOption","_init","_getItems","sizer","_initItems","_onResize","_getResizeFunction","readyState","layout","bind","onLoad","containerCss","getSize","_validateStyles","_setColumns","filter","initialSort","offsetWidth","setItemTransitions","transition","speed","easing","resizeFunction","_handleResize","throttle","throttleTime","option","querySelector","jquery","overflow","category","collection","set","_getFilteredSets","_toggleFilterClasses","hidden","item","_doesPassFilter","attr","getAttribute","FILTER_ATTRIBUTE_KEY","split","JSON","parse","testCategory","isArray","filterMode","FilterMode","ANY","show","hide","init","dispose","visibleItems","_getFilteredItems","_this$options","positionProps","useTransforms","cssProps","k","replace","str","m1","toLowerCase","properties","join","transitionDuration","transitionTimingFunction","transitionProperty","itemSelector","indexOf","gutterSize","size","gutterWidth","gutter","_getGutterSize","_getColumnSize","calculatedColumns","columnThreshold","cols","colWidth","_getContainerSize","index","staggerAmount","staggerAmountMax","shuffle","_this4","itemPositions","_getNextPositions","equals","getStylesForTransition","_getStaggerAmount","_this5","isCentered","itemsData","itemSize","_getItemPosition","getTransformedPositions","gridSize","total","span","setY","shortColumnIndex","setHeight","getItemPosition","_this6","_getConcealedItems","update","styleObject","roundTransforms","transform","itemCallback","done","_this7","_whenTransitionDone","_cancelMovement","hasSpeed","hasQueue","_startTransitions","_styleImmediately","_dispatch","EventType","LAYOUT","_this8","fns","context","pending","finished","results","maybeDone","err","result","arrayParallel","_getTransitionFunction","_movementFinished","objects","elements","_skipTransitions","sortObj","_filter","_shrink","_updateItemCount","sortOptions","_resetCols","_layout","_processQueue","_setContainerSize","isOnlyLayout","newItems","_this9","sortedItems","_mergeNewItems","allSortedItemsSet","isNewItem","applyHiddenState","isUpdateLayout","_this10","oldItems","getItemByElement","_disposeItems","REMOVED","find","_this11","includeMargins","duration","delay","ALL","__sorter","__getColumnSpan","__getAvailablePositions","__getShortColumn","__getCenteredPositions"],"mappings":"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","file":"static/js/6.17765db8.chunk.js","sourcesContent":["import '../../style/index.css';\nimport './index.css';","function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nimport * as React from 'react';\nimport Animate from 'rc-animate';\nimport addEventListener from \"rc-util/es/Dom/addEventListener\";\nimport classNames from 'classnames';\nimport omit from 'omit.js';\nimport raf from 'raf';\nimport { ConfigConsumer } from '../config-provider';\nimport getScroll from '../_util/getScroll';\n\nvar easeInOutCubic = function easeInOutCubic(t, b, c, d) {\n  var cc = c - b;\n  t /= d / 2;\n\n  if (t < 1) {\n    return cc / 2 * t * t * t + b;\n  } else {\n    return cc / 2 * ((t -= 2) * t * t + 2) + b;\n  }\n};\n\nfunction noop() {}\n\nfunction getDefaultTarget() {\n  return window;\n}\n\nvar BackTop =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(BackTop, _React$Component);\n\n  function BackTop(props) {\n    var _this;\n\n    _classCallCheck(this, BackTop);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(BackTop).call(this, props));\n\n    _this.getCurrentScrollTop = function () {\n      var getTarget = _this.props.target || getDefaultTarget;\n      var targetNode = getTarget();\n\n      if (targetNode === window) {\n        return window.pageYOffset || document.body.scrollTop || document.documentElement.scrollTop;\n      }\n\n      return targetNode.scrollTop;\n    };\n\n    _this.scrollToTop = function (e) {\n      var scrollTop = _this.getCurrentScrollTop();\n\n      var startTime = Date.now();\n\n      var frameFunc = function frameFunc() {\n        var timestamp = Date.now();\n        var time = timestamp - startTime;\n\n        _this.setScrollTop(easeInOutCubic(time, scrollTop, 0, 450));\n\n        if (time < 450) {\n          raf(frameFunc);\n        } else {\n          _this.setScrollTop(0);\n        }\n      };\n\n      raf(frameFunc);\n      (_this.props.onClick || noop)(e);\n    };\n\n    _this.handleScroll = function () {\n      var _this$props = _this.props,\n          visibilityHeight = _this$props.visibilityHeight,\n          _this$props$target = _this$props.target,\n          target = _this$props$target === void 0 ? getDefaultTarget : _this$props$target;\n      var scrollTop = getScroll(target(), true);\n\n      _this.setState({\n        visible: scrollTop > visibilityHeight\n      });\n    };\n\n    _this.renderBackTop = function (_ref) {\n      var getPrefixCls = _ref.getPrefixCls;\n      var _this$props2 = _this.props,\n          customizePrefixCls = _this$props2.prefixCls,\n          _this$props2$classNam = _this$props2.className,\n          className = _this$props2$classNam === void 0 ? '' : _this$props2$classNam,\n          children = _this$props2.children;\n      var prefixCls = getPrefixCls('back-top', customizePrefixCls);\n      var classString = classNames(prefixCls, className);\n      var defaultElement = React.createElement(\"div\", {\n        className: \"\".concat(prefixCls, \"-content\")\n      }, React.createElement(\"div\", {\n        className: \"\".concat(prefixCls, \"-icon\")\n      })); // fix https://fb.me/react-unknown-prop\n\n      var divProps = omit(_this.props, ['prefixCls', 'className', 'children', 'visibilityHeight', 'target', 'visible']);\n      var visible = 'visible' in _this.props ? _this.props.visible : _this.state.visible;\n      var backTopBtn = visible ? React.createElement(\"div\", _extends({}, divProps, {\n        className: classString,\n        onClick: _this.scrollToTop\n      }), children || defaultElement) : null;\n      return React.createElement(Animate, {\n        component: \"\",\n        transitionName: \"fade\"\n      }, backTopBtn);\n    };\n\n    _this.state = {\n      visible: false\n    };\n    return _this;\n  }\n\n  _createClass(BackTop, [{\n    key: \"setScrollTop\",\n    value: function setScrollTop(value) {\n      var getTarget = this.props.target || getDefaultTarget;\n      var targetNode = getTarget();\n\n      if (targetNode === window) {\n        document.body.scrollTop = value;\n        document.documentElement.scrollTop = value;\n      } else {\n        targetNode.scrollTop = value;\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var getTarget = this.props.target || getDefaultTarget;\n      this.scrollEvent = addEventListener(getTarget(), 'scroll', this.handleScroll);\n      this.handleScroll();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.scrollEvent) {\n        this.scrollEvent.remove();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(ConfigConsumer, null, this.renderBackTop);\n    }\n  }]);\n\n  return BackTop;\n}(React.Component);\n\nexport { BackTop as default };\nBackTop.defaultProps = {\n  visibilityHeight: 400\n};","export default function getScroll(target, top) {\n  if (typeof window === 'undefined') {\n    return 0;\n  }\n\n  var prop = top ? 'pageYOffset' : 'pageXOffset';\n  var method = top ? 'scrollTop' : 'scrollLeft';\n  var isWindow = target === window;\n  var ret = isWindow ? target[prop] : target[method]; // ie6,7,8 standard mode\n\n  if (isWindow && typeof ret !== 'number') {\n    ret = document.documentElement[method];\n  }\n\n  return ret;\n}","function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (typeof call === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction E() {// Keep this empty so it's easier to inherit from\n  // (via https://github.com/lipsmack from https://github.com/scottcorgan/tiny-emitter/issues/3)\n}\n\nE.prototype = {\n  on: function on(name, callback, ctx) {\n    var e = this.e || (this.e = {});\n    (e[name] || (e[name] = [])).push({\n      fn: callback,\n      ctx: ctx\n    });\n    return this;\n  },\n  once: function once(name, callback, ctx) {\n    var self = this;\n\n    function listener() {\n      self.off(name, listener);\n      callback.apply(ctx, arguments);\n    }\n\n    listener._ = callback;\n    return this.on(name, listener, ctx);\n  },\n  emit: function emit(name) {\n    var data = [].slice.call(arguments, 1);\n    var evtArr = ((this.e || (this.e = {}))[name] || []).slice();\n    var i = 0;\n    var len = evtArr.length;\n\n    for (i; i < len; i++) {\n      evtArr[i].fn.apply(evtArr[i].ctx, data);\n    }\n\n    return this;\n  },\n  off: function off(name, callback) {\n    var e = this.e || (this.e = {});\n    var evts = e[name];\n    var liveEvents = [];\n\n    if (evts && callback) {\n      for (var i = 0, len = evts.length; i < len; i++) {\n        if (evts[i].fn !== callback && evts[i].fn._ !== callback) liveEvents.push(evts[i]);\n      }\n    } // Remove event from queue to prevent memory leak\n    // Suggested by https://github.com/lazd\n    // Ref: https://github.com/scottcorgan/tiny-emitter/commit/c6ebfaa9bc973b33d110a84a307742b7cf94c953#commitcomment-5024910\n\n\n    liveEvents.length ? e[name] = liveEvents : delete e[name];\n    return this;\n  }\n};\nvar tinyEmitter = E;\nvar proto = typeof Element !== 'undefined' ? Element.prototype : {};\nvar vendor = proto.matches || proto.matchesSelector || proto.webkitMatchesSelector || proto.mozMatchesSelector || proto.msMatchesSelector || proto.oMatchesSelector;\nvar matchesSelector = match;\n/**\n * Match `el` to `selector`.\n *\n * @param {Element} el\n * @param {String} selector\n * @return {Boolean}\n * @api public\n */\n\nfunction match(el, selector) {\n  if (!el || el.nodeType !== 1) return false;\n  if (vendor) return vendor.call(el, selector);\n  var nodes = el.parentNode.querySelectorAll(selector);\n\n  for (var i = 0; i < nodes.length; i++) {\n    if (nodes[i] == el) return true;\n  }\n\n  return false;\n}\n\nvar throttleit = throttle;\n/**\n * Returns a new function that, when invoked, invokes `func` at most once per `wait` milliseconds.\n *\n * @param {Function} func Function to wrap.\n * @param {Number} wait Number of milliseconds that must elapse between `func` invocations.\n * @return {Function} A new function that wraps the `func` function passed in.\n */\n\nfunction throttle(func, wait) {\n  var ctx, args, rtn, timeoutID; // caching\n\n  var last = 0;\n  return function throttled() {\n    ctx = this;\n    args = arguments;\n    var delta = new Date() - last;\n    if (!timeoutID) if (delta >= wait) call();else timeoutID = setTimeout(call, wait - delta);\n    return rtn;\n  };\n\n  function call() {\n    timeoutID = 0;\n    last = +new Date();\n    rtn = func.apply(ctx, args);\n    ctx = null;\n    args = null;\n  }\n}\n\nvar arrayParallel = function parallel(fns, context, callback) {\n  if (!callback) {\n    if (typeof context === 'function') {\n      callback = context;\n      context = null;\n    } else {\n      callback = noop;\n    }\n  }\n\n  var pending = fns && fns.length;\n  if (!pending) return callback(null, []);\n  var finished = false;\n  var results = new Array(pending);\n  fns.forEach(context ? function (fn, i) {\n    fn.call(context, maybeDone(i));\n  } : function (fn, i) {\n    fn(maybeDone(i));\n  });\n\n  function maybeDone(i) {\n    return function (err, result) {\n      if (finished) return;\n\n      if (err) {\n        callback(err, results);\n        finished = true;\n        return;\n      }\n\n      results[i] = result;\n      if (! --pending) callback(null, results);\n    };\n  }\n};\n\nfunction noop() {}\n/**\n * Always returns a numeric value, given a value. Logic from jQuery's `isNumeric`.\n * @param {*} value Possibly numeric value.\n * @return {number} `value` or zero if `value` isn't numeric.\n */\n\n\nfunction getNumber(value) {\n  return parseFloat(value) || 0;\n}\n\nvar Point =\n/*#__PURE__*/\nfunction () {\n  /**\n   * Represents a coordinate pair.\n   * @param {number} [x=0] X.\n   * @param {number} [y=0] Y.\n   */\n  function Point(x, y) {\n    _classCallCheck(this, Point);\n\n    this.x = getNumber(x);\n    this.y = getNumber(y);\n  }\n  /**\n   * Whether two points are equal.\n   * @param {Point} a Point A.\n   * @param {Point} b Point B.\n   * @return {boolean}\n   */\n\n\n  _createClass(Point, null, [{\n    key: \"equals\",\n    value: function equals(a, b) {\n      return a.x === b.x && a.y === b.y;\n    }\n  }]);\n\n  return Point;\n}();\n\nvar Rect =\n/*#__PURE__*/\nfunction () {\n  /**\n   * Class for representing rectangular regions.\n   * https://github.com/google/closure-library/blob/master/closure/goog/math/rect.js\n   * @param {number} x Left.\n   * @param {number} y Top.\n   * @param {number} w Width.\n   * @param {number} h Height.\n   * @param {number} id Identifier\n   * @constructor\n   */\n  function Rect(x, y, w, h, id) {\n    _classCallCheck(this, Rect);\n\n    this.id = id;\n    /** @type {number} */\n\n    this.left = x;\n    /** @type {number} */\n\n    this.top = y;\n    /** @type {number} */\n\n    this.width = w;\n    /** @type {number} */\n\n    this.height = h;\n  }\n  /**\n   * Returns whether two rectangles intersect.\n   * @param {Rect} a A Rectangle.\n   * @param {Rect} b A Rectangle.\n   * @return {boolean} Whether a and b intersect.\n   */\n\n\n  _createClass(Rect, null, [{\n    key: \"intersects\",\n    value: function intersects(a, b) {\n      return a.left < b.left + b.width && b.left < a.left + a.width && a.top < b.top + b.height && b.top < a.top + a.height;\n    }\n  }]);\n\n  return Rect;\n}();\n\nvar Classes = {\n  BASE: 'shuffle',\n  SHUFFLE_ITEM: 'shuffle-item',\n  VISIBLE: 'shuffle-item--visible',\n  HIDDEN: 'shuffle-item--hidden'\n};\nvar id$1 = 0;\n\nvar ShuffleItem =\n/*#__PURE__*/\nfunction () {\n  function ShuffleItem(element) {\n    _classCallCheck(this, ShuffleItem);\n\n    id$1 += 1;\n    this.id = id$1;\n    this.element = element;\n    /**\n     * Used to separate items for layout and shrink.\n     */\n\n    this.isVisible = true;\n    /**\n     * Used to determine if a transition will happen. By the time the _layout\n     * and _shrink methods get the ShuffleItem instances, the `isVisible` value\n     * has already been changed by the separation methods, so this property is\n     * needed to know if the item was visible/hidden before the shrink/layout.\n     */\n\n    this.isHidden = false;\n  }\n\n  _createClass(ShuffleItem, [{\n    key: \"show\",\n    value: function show() {\n      this.isVisible = true;\n      this.element.classList.remove(Classes.HIDDEN);\n      this.element.classList.add(Classes.VISIBLE);\n      this.element.removeAttribute('aria-hidden');\n    }\n  }, {\n    key: \"hide\",\n    value: function hide() {\n      this.isVisible = false;\n      this.element.classList.remove(Classes.VISIBLE);\n      this.element.classList.add(Classes.HIDDEN);\n      this.element.setAttribute('aria-hidden', true);\n    }\n  }, {\n    key: \"init\",\n    value: function init() {\n      this.addClasses([Classes.SHUFFLE_ITEM, Classes.VISIBLE]);\n      this.applyCss(ShuffleItem.Css.INITIAL);\n      this.scale = ShuffleItem.Scale.VISIBLE;\n      this.point = new Point();\n    }\n  }, {\n    key: \"addClasses\",\n    value: function addClasses(classes) {\n      var _this = this;\n\n      classes.forEach(function (className) {\n        _this.element.classList.add(className);\n      });\n    }\n  }, {\n    key: \"removeClasses\",\n    value: function removeClasses(classes) {\n      var _this2 = this;\n\n      classes.forEach(function (className) {\n        _this2.element.classList.remove(className);\n      });\n    }\n  }, {\n    key: \"applyCss\",\n    value: function applyCss(obj) {\n      var _this3 = this;\n\n      Object.keys(obj).forEach(function (key) {\n        _this3.element.style[key] = obj[key];\n      });\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      this.removeClasses([Classes.HIDDEN, Classes.VISIBLE, Classes.SHUFFLE_ITEM]);\n      this.element.removeAttribute('style');\n      this.element = null;\n    }\n  }]);\n\n  return ShuffleItem;\n}();\n\nShuffleItem.Css = {\n  INITIAL: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    visibility: 'visible',\n    'will-change': 'transform'\n  },\n  VISIBLE: {\n    before: {\n      opacity: 1,\n      visibility: 'visible'\n    },\n    after: {\n      transitionDelay: ''\n    }\n  },\n  HIDDEN: {\n    before: {\n      opacity: 0\n    },\n    after: {\n      visibility: 'hidden',\n      transitionDelay: ''\n    }\n  }\n};\nShuffleItem.Scale = {\n  VISIBLE: 1,\n  HIDDEN: 0.001\n};\nvar value = null;\n\nvar testComputedSize = function testComputedSize() {\n  if (value !== null) {\n    return value;\n  }\n\n  var element = document.body || document.documentElement;\n  var e = document.createElement('div');\n  e.style.cssText = 'width:10px;padding:2px;box-sizing:border-box;';\n  element.appendChild(e);\n  value = window.getComputedStyle(e, null).width === '10px';\n  element.removeChild(e);\n  return value;\n};\n/**\n * Retrieve the computed style for an element, parsed as a float.\n * @param {Element} element Element to get style for.\n * @param {string} style Style property.\n * @param {CSSStyleDeclaration} [styles] Optionally include clean styles to\n *     use instead of asking for them again.\n * @return {number} The parsed computed value or zero if that fails because IE\n *     will return 'auto' when the element doesn't have margins instead of\n *     the computed style.\n */\n\n\nfunction getNumberStyle(element, style) {\n  var styles = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : window.getComputedStyle(element, null);\n  var value = getNumber(styles[style]); // Support IE<=11 and W3C spec.\n\n  if (!testComputedSize() && style === 'width') {\n    value += getNumber(styles.paddingLeft) + getNumber(styles.paddingRight) + getNumber(styles.borderLeftWidth) + getNumber(styles.borderRightWidth);\n  } else if (!testComputedSize() && style === 'height') {\n    value += getNumber(styles.paddingTop) + getNumber(styles.paddingBottom) + getNumber(styles.borderTopWidth) + getNumber(styles.borderBottomWidth);\n  }\n\n  return value;\n}\n/**\n * Fisher-Yates shuffle.\n * http://stackoverflow.com/a/962890/373422\n * https://bost.ocks.org/mike/shuffle/\n * @param {Array} array Array to shuffle.\n * @return {Array} Randomly sorted array.\n */\n\n\nfunction randomize(array) {\n  var n = array.length;\n\n  while (n) {\n    n -= 1;\n    var i = Math.floor(Math.random() * (n + 1));\n    var temp = array[i];\n    array[i] = array[n];\n    array[n] = temp;\n  }\n\n  return array;\n}\n\nvar defaults = {\n  // Use array.reverse() to reverse the results\n  reverse: false,\n  // Sorting function\n  by: null,\n  // Custom sort function\n  compare: null,\n  // If true, this will skip the sorting and return a randomized order in the array\n  randomize: false,\n  // Determines which property of each item in the array is passed to the\n  // sorting method.\n  key: 'element'\n}; // You can return `undefined` from the `by` function to revert to DOM order.\n\nfunction sorter(arr, options) {\n  var opts = Object.assign({}, defaults, options);\n  var original = Array.from(arr);\n  var revert = false;\n\n  if (!arr.length) {\n    return [];\n  }\n\n  if (opts.randomize) {\n    return randomize(arr);\n  } // Sort the elements by the opts.by function.\n  // If we don't have opts.by, default to DOM order\n\n\n  if (typeof opts.by === 'function') {\n    arr.sort(function (a, b) {\n      // Exit early if we already know we want to revert\n      if (revert) {\n        return 0;\n      }\n\n      var valA = opts.by(a[opts.key]);\n      var valB = opts.by(b[opts.key]); // If both values are undefined, use the DOM order\n\n      if (valA === undefined && valB === undefined) {\n        revert = true;\n        return 0;\n      }\n\n      if (valA < valB || valA === 'sortFirst' || valB === 'sortLast') {\n        return -1;\n      }\n\n      if (valA > valB || valA === 'sortLast' || valB === 'sortFirst') {\n        return 1;\n      }\n\n      return 0;\n    });\n  } else if (typeof opts.compare === 'function') {\n    arr.sort(opts.compare);\n  } // Revert to the original array if necessary\n\n\n  if (revert) {\n    return original;\n  }\n\n  if (opts.reverse) {\n    arr.reverse();\n  }\n\n  return arr;\n}\n\nvar transitions = {};\nvar eventName = 'transitionend';\nvar count = 0;\n\nfunction uniqueId() {\n  count += 1;\n  return eventName + count;\n}\n\nfunction cancelTransitionEnd(id) {\n  if (transitions[id]) {\n    transitions[id].element.removeEventListener(eventName, transitions[id].listener);\n    transitions[id] = null;\n    return true;\n  }\n\n  return false;\n}\n\nfunction onTransitionEnd(element, callback) {\n  var id = uniqueId();\n\n  var listener = function listener(evt) {\n    if (evt.currentTarget === evt.target) {\n      cancelTransitionEnd(id);\n      callback(evt);\n    }\n  };\n\n  element.addEventListener(eventName, listener);\n  transitions[id] = {\n    element: element,\n    listener: listener\n  };\n  return id;\n}\n\nfunction arrayMax(array) {\n  return Math.max.apply(Math, array); // eslint-disable-line prefer-spread\n}\n\nfunction arrayMin(array) {\n  return Math.min.apply(Math, array); // eslint-disable-line prefer-spread\n}\n/**\n * Determine the number of columns an items spans.\n * @param {number} itemWidth Width of the item.\n * @param {number} columnWidth Width of the column (includes gutter).\n * @param {number} columns Total number of columns\n * @param {number} threshold A buffer value for the size of the column to fit.\n * @return {number}\n */\n\n\nfunction getColumnSpan(itemWidth, columnWidth, columns, threshold) {\n  var columnSpan = itemWidth / columnWidth; // If the difference between the rounded column span number and the\n  // calculated column span number is really small, round the number to\n  // make it fit.\n\n  if (Math.abs(Math.round(columnSpan) - columnSpan) < threshold) {\n    // e.g. columnSpan = 4.0089945390298745\n    columnSpan = Math.round(columnSpan);\n  } // Ensure the column span is not more than the amount of columns in the whole layout.\n\n\n  return Math.min(Math.ceil(columnSpan), columns);\n}\n/**\n * Retrieves the column set to use for placement.\n * @param {number} columnSpan The number of columns this current item spans.\n * @param {number} columns The total columns in the grid.\n * @return {Array.<number>} An array of numbers represeting the column set.\n */\n\n\nfunction getAvailablePositions(positions, columnSpan, columns) {\n  // The item spans only one column.\n  if (columnSpan === 1) {\n    return positions;\n  } // The item spans more than one column, figure out how many different\n  // places it could fit horizontally.\n  // The group count is the number of places within the positions this block\n  // could fit, ignoring the current positions of items.\n  // Imagine a 2 column brick as the second item in a 4 column grid with\n  // 10px height each. Find the places it would fit:\n  // [20, 10, 10, 0]\n  //  |   |   |\n  //  *   *   *\n  //\n  // Then take the places which fit and get the bigger of the two:\n  // max([20, 10]), max([10, 10]), max([10, 0]) = [20, 10, 10]\n  //\n  // Next, find the first smallest number (the short column).\n  // [20, 10, 10]\n  //      |\n  //      *\n  //\n  // And that's where it should be placed!\n  //\n  // Another example where the second column's item extends past the first:\n  // [10, 20, 10, 0] => [20, 20, 10] => 10\n\n\n  var available = []; // For how many possible positions for this item there are.\n\n  for (var i = 0; i <= columns - columnSpan; i++) {\n    // Find the bigger value for each place it could fit.\n    available.push(arrayMax(positions.slice(i, i + columnSpan)));\n  }\n\n  return available;\n}\n/**\n * Find index of short column, the first from the left where this item will go.\n *\n * @param {Array.<number>} positions The array to search for the smallest number.\n * @param {number} buffer Optional buffer which is very useful when the height\n *     is a percentage of the width.\n * @return {number} Index of the short column.\n */\n\n\nfunction getShortColumn(positions, buffer) {\n  var minPosition = arrayMin(positions);\n\n  for (var i = 0, len = positions.length; i < len; i++) {\n    if (positions[i] >= minPosition - buffer && positions[i] <= minPosition + buffer) {\n      return i;\n    }\n  }\n\n  return 0;\n}\n/**\n * Determine the location of the next item, based on its size.\n * @param {Object} itemSize Object with width and height.\n * @param {Array.<number>} positions Positions of the other current items.\n * @param {number} gridSize The column width or row height.\n * @param {number} total The total number of columns or rows.\n * @param {number} threshold Buffer value for the column to fit.\n * @param {number} buffer Vertical buffer for the height of items.\n * @return {Point}\n */\n\n\nfunction getItemPosition(_ref) {\n  var itemSize = _ref.itemSize,\n      positions = _ref.positions,\n      gridSize = _ref.gridSize,\n      total = _ref.total,\n      threshold = _ref.threshold,\n      buffer = _ref.buffer;\n  var span = getColumnSpan(itemSize.width, gridSize, total, threshold);\n  var setY = getAvailablePositions(positions, span, total);\n  var shortColumnIndex = getShortColumn(setY, buffer); // Position the item\n\n  var point = new Point(gridSize * shortColumnIndex, setY[shortColumnIndex]); // Update the columns array with the new values for each column.\n  // e.g. before the update the columns could be [250, 0, 0, 0] for an item\n  // which spans 2 columns. After it would be [250, itemHeight, itemHeight, 0].\n\n  var setHeight = setY[shortColumnIndex] + itemSize.height;\n\n  for (var i = 0; i < span; i++) {\n    positions[shortColumnIndex + i] = setHeight;\n  }\n\n  return point;\n}\n/**\n * This method attempts to center items. This method could potentially be slow\n * with a large number of items because it must place items, then check every\n * previous item to ensure there is no overlap.\n * @param {Array.<Rect>} itemRects Item data objects.\n * @param {number} containerWidth Width of the containing element.\n * @return {Array.<Point>}\n */\n\n\nfunction getCenteredPositions(itemRects, containerWidth) {\n  var rowMap = {}; // Populate rows by their offset because items could jump between rows like:\n  // a   c\n  //  bbb\n\n  itemRects.forEach(function (itemRect) {\n    if (rowMap[itemRect.top]) {\n      // Push the point to the last row array.\n      rowMap[itemRect.top].push(itemRect);\n    } else {\n      // Start of a new row.\n      rowMap[itemRect.top] = [itemRect];\n    }\n  }); // For each row, find the end of the last item, then calculate\n  // the remaining space by dividing it by 2. Then add that\n  // offset to the x position of each point.\n\n  var rects = [];\n  var rows = [];\n  var centeredRows = [];\n  Object.keys(rowMap).forEach(function (key) {\n    var itemRects = rowMap[key];\n    rows.push(itemRects);\n    var lastItem = itemRects[itemRects.length - 1];\n    var end = lastItem.left + lastItem.width;\n    var offset = Math.round((containerWidth - end) / 2);\n    var finalRects = itemRects;\n    var canMove = false;\n\n    if (offset > 0) {\n      var newRects = [];\n      canMove = itemRects.every(function (r) {\n        var newRect = new Rect(r.left + offset, r.top, r.width, r.height, r.id); // Check all current rects to make sure none overlap.\n\n        var noOverlap = !rects.some(function (r) {\n          return Rect.intersects(newRect, r);\n        });\n        newRects.push(newRect);\n        return noOverlap;\n      }); // If none of the rectangles overlapped, the whole group can be centered.\n\n      if (canMove) {\n        finalRects = newRects;\n      }\n    } // If the items are not going to be offset, ensure that the original\n    // placement for this row will not overlap previous rows (row-spanning\n    // elements could be in the way).\n\n\n    if (!canMove) {\n      var intersectingRect;\n      var hasOverlap = itemRects.some(function (itemRect) {\n        return rects.some(function (r) {\n          var intersects = Rect.intersects(itemRect, r);\n\n          if (intersects) {\n            intersectingRect = r;\n          }\n\n          return intersects;\n        });\n      }); // If there is any overlap, replace the overlapping row with the original.\n\n      if (hasOverlap) {\n        var rowIndex = centeredRows.findIndex(function (items) {\n          return items.includes(intersectingRect);\n        });\n        centeredRows.splice(rowIndex, 1, rows[rowIndex]);\n      }\n    }\n\n    rects = rects.concat(finalRects);\n    centeredRows.push(finalRects);\n  }); // Reduce array of arrays to a single array of points.\n  // https://stackoverflow.com/a/10865042/373422\n  // Then reset sort back to how the items were passed to this method.\n  // Remove the wrapper object with index, map to a Point.\n\n  return [].concat.apply([], centeredRows) // eslint-disable-line prefer-spread\n  .sort(function (a, b) {\n    return a.id - b.id;\n  }).map(function (itemRect) {\n    return new Point(itemRect.left, itemRect.top);\n  });\n}\n/**\n * Hyphenates a javascript style string to a css one. For example:\n * MozBoxSizing -> -moz-box-sizing.\n * @param {string} str The string to hyphenate.\n * @return {string} The hyphenated string.\n */\n\n\nfunction hyphenate(str) {\n  return str.replace(/([A-Z])/g, function (str, m1) {\n    return \"-\".concat(m1.toLowerCase());\n  });\n}\n\nfunction arrayUnique(x) {\n  return Array.from(new Set(x));\n} // Used for unique instance variables\n\n\nvar id$2 = 0;\n\nvar Shuffle =\n/*#__PURE__*/\nfunction (_TinyEmitter) {\n  _inherits(Shuffle, _TinyEmitter);\n  /**\n   * Categorize, sort, and filter a responsive grid of items.\n   *\n   * @param {Element} element An element which is the parent container for the grid items.\n   * @param {Object} [options=Shuffle.options] Options object.\n   * @constructor\n   */\n\n\n  function Shuffle(element) {\n    var _this;\n\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Shuffle);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Shuffle).call(this));\n    _this.options = Object.assign({}, Shuffle.options, options); // Allow misspelling of delimiter since that's how it used to be.\n    // Remove in v6.\n\n    if (_this.options.delimeter) {\n      _this.options.delimiter = _this.options.delimeter;\n    }\n\n    _this.lastSort = {};\n    _this.group = Shuffle.ALL_ITEMS;\n    _this.lastFilter = Shuffle.ALL_ITEMS;\n    _this.isEnabled = true;\n    _this.isDestroyed = false;\n    _this.isInitialized = false;\n    _this._transitions = [];\n    _this.isTransitioning = false;\n    _this._queue = [];\n\n    var el = _this._getElementOption(element);\n\n    if (!el) {\n      throw new TypeError('Shuffle needs to be initialized with an element.');\n    }\n\n    _this.element = el;\n    _this.id = 'shuffle_' + id$2;\n    id$2 += 1;\n\n    _this._init();\n\n    _this.isInitialized = true;\n    return _this;\n  }\n\n  _createClass(Shuffle, [{\n    key: \"_init\",\n    value: function _init() {\n      this.items = this._getItems();\n      this.options.sizer = this._getElementOption(this.options.sizer); // Add class and invalidate styles\n\n      this.element.classList.add(Shuffle.Classes.BASE); // Set initial css for each item\n\n      this._initItems(this.items); // Bind resize events\n\n\n      this._onResize = this._getResizeFunction();\n      window.addEventListener('resize', this._onResize); // If the page has not already emitted the `load` event, call layout on load.\n      // This avoids layout issues caused by images and fonts loading after the\n      // instance has been initialized.\n\n      if (document.readyState !== 'complete') {\n        var layout = this.layout.bind(this);\n        window.addEventListener('load', function onLoad() {\n          window.removeEventListener('load', onLoad);\n          layout();\n        });\n      } // Get container css all in one request. Causes reflow\n\n\n      var containerCss = window.getComputedStyle(this.element, null);\n      var containerWidth = Shuffle.getSize(this.element).width; // Add styles to the container if it doesn't have them.\n\n      this._validateStyles(containerCss); // We already got the container's width above, no need to cause another\n      // reflow getting it again... Calculate the number of columns there will be\n\n\n      this._setColumns(containerWidth); // Kick off!\n\n\n      this.filter(this.options.group, this.options.initialSort); // The shuffle items haven't had transitions set on them yet so the user\n      // doesn't see the first layout. Set them now that the first layout is done.\n      // First, however, a synchronous layout must be caused for the previous\n      // styles to be applied without transitions.\n\n      this.element.offsetWidth; // eslint-disable-line no-unused-expressions\n\n      this.setItemTransitions(this.items);\n      this.element.style.transition = \"height \".concat(this.options.speed, \"ms \").concat(this.options.easing);\n    }\n    /**\n     * Returns a throttled and proxied function for the resize handler.\n     * @return {function}\n     * @private\n     */\n\n  }, {\n    key: \"_getResizeFunction\",\n    value: function _getResizeFunction() {\n      var resizeFunction = this._handleResize.bind(this);\n\n      return this.options.throttle ? this.options.throttle(resizeFunction, this.options.throttleTime) : resizeFunction;\n    }\n    /**\n     * Retrieve an element from an option.\n     * @param {string|jQuery|Element} option The option to check.\n     * @return {?Element} The plain element or null.\n     * @private\n     */\n\n  }, {\n    key: \"_getElementOption\",\n    value: function _getElementOption(option) {\n      // If column width is a string, treat is as a selector and search for the\n      // sizer element within the outermost container\n      if (typeof option === 'string') {\n        return this.element.querySelector(option);\n      } // Check for an element\n\n\n      if (option && option.nodeType && option.nodeType === 1) {\n        return option;\n      } // Check for jQuery object\n\n\n      if (option && option.jquery) {\n        return option[0];\n      }\n\n      return null;\n    }\n    /**\n     * Ensures the shuffle container has the css styles it needs applied to it.\n     * @param {Object} styles Key value pairs for position and overflow.\n     * @private\n     */\n\n  }, {\n    key: \"_validateStyles\",\n    value: function _validateStyles(styles) {\n      // Position cannot be static.\n      if (styles.position === 'static') {\n        this.element.style.position = 'relative';\n      } // Overflow has to be hidden.\n\n\n      if (styles.overflow !== 'hidden') {\n        this.element.style.overflow = 'hidden';\n      }\n    }\n    /**\n     * Filter the elements by a category.\n     * @param {string|string[]|function(Element):boolean} [category] Category to\n     *     filter by. If it's given, the last category will be used to filter the items.\n     * @param {Array} [collection] Optionally filter a collection. Defaults to\n     *     all the items.\n     * @return {{visible: ShuffleItem[], hidden: ShuffleItem[]}}\n     * @private\n     */\n\n  }, {\n    key: \"_filter\",\n    value: function _filter() {\n      var category = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.lastFilter;\n      var collection = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.items;\n\n      var set = this._getFilteredSets(category, collection); // Individually add/remove hidden/visible classes\n\n\n      this._toggleFilterClasses(set); // Save the last filter in case elements are appended.\n\n\n      this.lastFilter = category; // This is saved mainly because providing a filter function (like searching)\n      // will overwrite the `lastFilter` property every time its called.\n\n      if (typeof category === 'string') {\n        this.group = category;\n      }\n\n      return set;\n    }\n    /**\n     * Returns an object containing the visible and hidden elements.\n     * @param {string|string[]|function(Element):boolean} category Category or function to filter by.\n     * @param {ShuffleItem[]} items A collection of items to filter.\n     * @return {{visible: ShuffleItem[], hidden: ShuffleItem[]}}\n     * @private\n     */\n\n  }, {\n    key: \"_getFilteredSets\",\n    value: function _getFilteredSets(category, items) {\n      var _this2 = this;\n\n      var visible = [];\n      var hidden = []; // category === 'all', add visible class to everything\n\n      if (category === Shuffle.ALL_ITEMS) {\n        visible = items; // Loop through each item and use provided function to determine\n        // whether to hide it or not.\n      } else {\n        items.forEach(function (item) {\n          if (_this2._doesPassFilter(category, item.element)) {\n            visible.push(item);\n          } else {\n            hidden.push(item);\n          }\n        });\n      }\n\n      return {\n        visible: visible,\n        hidden: hidden\n      };\n    }\n    /**\n     * Test an item to see if it passes a category.\n     * @param {string|string[]|function():boolean} category Category or function to filter by.\n     * @param {Element} element An element to test.\n     * @return {boolean} Whether it passes the category/filter.\n     * @private\n     */\n\n  }, {\n    key: \"_doesPassFilter\",\n    value: function _doesPassFilter(category, element) {\n      if (typeof category === 'function') {\n        return category.call(element, element, this);\n      } // Check each element's data-groups attribute against the given category.\n\n\n      var attr = element.getAttribute('data-' + Shuffle.FILTER_ATTRIBUTE_KEY);\n      var keys = this.options.delimiter ? attr.split(this.options.delimiter) : JSON.parse(attr);\n\n      function testCategory(category) {\n        return keys.includes(category);\n      }\n\n      if (Array.isArray(category)) {\n        if (this.options.filterMode === Shuffle.FilterMode.ANY) {\n          return category.some(testCategory);\n        }\n\n        return category.every(testCategory);\n      }\n\n      return keys.includes(category);\n    }\n    /**\n     * Toggles the visible and hidden class names.\n     * @param {{visible, hidden}} Object with visible and hidden arrays.\n     * @private\n     */\n\n  }, {\n    key: \"_toggleFilterClasses\",\n    value: function _toggleFilterClasses(_ref) {\n      var visible = _ref.visible,\n          hidden = _ref.hidden;\n      visible.forEach(function (item) {\n        item.show();\n      });\n      hidden.forEach(function (item) {\n        item.hide();\n      });\n    }\n    /**\n     * Set the initial css for each item\n     * @param {ShuffleItem[]} items Set to initialize.\n     * @private\n     */\n\n  }, {\n    key: \"_initItems\",\n    value: function _initItems(items) {\n      items.forEach(function (item) {\n        item.init();\n      });\n    }\n    /**\n     * Remove element reference and styles.\n     * @param {ShuffleItem[]} items Set to dispose.\n     * @private\n     */\n\n  }, {\n    key: \"_disposeItems\",\n    value: function _disposeItems(items) {\n      items.forEach(function (item) {\n        item.dispose();\n      });\n    }\n    /**\n     * Updates the visible item count.\n     * @private\n     */\n\n  }, {\n    key: \"_updateItemCount\",\n    value: function _updateItemCount() {\n      this.visibleItems = this._getFilteredItems().length;\n    }\n    /**\n     * Sets css transform transition on a group of elements. This is not executed\n     * at the same time as `item.init` so that transitions don't occur upon\n     * initialization of a new Shuffle instance.\n     * @param {ShuffleItem[]} items Shuffle items to set transitions on.\n     * @protected\n     */\n\n  }, {\n    key: \"setItemTransitions\",\n    value: function setItemTransitions(items) {\n      var _this$options = this.options,\n          speed = _this$options.speed,\n          easing = _this$options.easing;\n      var positionProps = this.options.useTransforms ? ['transform'] : ['top', 'left']; // Allow users to transtion other properties if they exist in the `before`\n      // css mapping of the shuffle item.\n\n      var cssProps = Object.keys(ShuffleItem.Css.HIDDEN.before).map(function (k) {\n        return hyphenate(k);\n      });\n      var properties = positionProps.concat(cssProps).join();\n      items.forEach(function (item) {\n        item.element.style.transitionDuration = speed + 'ms';\n        item.element.style.transitionTimingFunction = easing;\n        item.element.style.transitionProperty = properties;\n      });\n    }\n  }, {\n    key: \"_getItems\",\n    value: function _getItems() {\n      var _this3 = this;\n\n      return Array.from(this.element.children).filter(function (el) {\n        return matchesSelector(el, _this3.options.itemSelector);\n      }).map(function (el) {\n        return new ShuffleItem(el);\n      });\n    }\n    /**\n     * Combine the current items array with a new one and sort it by DOM order.\n     * @param {ShuffleItem[]} items Items to track.\n     * @return {ShuffleItem[]}\n     */\n\n  }, {\n    key: \"_mergeNewItems\",\n    value: function _mergeNewItems(items) {\n      var children = Array.from(this.element.children);\n      return sorter(this.items.concat(items), {\n        by: function by(element) {\n          return children.indexOf(element);\n        }\n      });\n    }\n  }, {\n    key: \"_getFilteredItems\",\n    value: function _getFilteredItems() {\n      return this.items.filter(function (item) {\n        return item.isVisible;\n      });\n    }\n  }, {\n    key: \"_getConcealedItems\",\n    value: function _getConcealedItems() {\n      return this.items.filter(function (item) {\n        return !item.isVisible;\n      });\n    }\n    /**\n     * Returns the column size, based on column width and sizer options.\n     * @param {number} containerWidth Size of the parent container.\n     * @param {number} gutterSize Size of the gutters.\n     * @return {number}\n     * @private\n     */\n\n  }, {\n    key: \"_getColumnSize\",\n    value: function _getColumnSize(containerWidth, gutterSize) {\n      var size; // If the columnWidth property is a function, then the grid is fluid\n\n      if (typeof this.options.columnWidth === 'function') {\n        size = this.options.columnWidth(containerWidth); // columnWidth option isn't a function, are they using a sizing element?\n      } else if (this.options.sizer) {\n        size = Shuffle.getSize(this.options.sizer).width; // if not, how about the explicitly set option?\n      } else if (this.options.columnWidth) {\n        size = this.options.columnWidth; // or use the size of the first item\n      } else if (this.items.length > 0) {\n        size = Shuffle.getSize(this.items[0].element, true).width; // if there's no items, use size of container\n      } else {\n        size = containerWidth;\n      } // Don't let them set a column width of zero.\n\n\n      if (size === 0) {\n        size = containerWidth;\n      }\n\n      return size + gutterSize;\n    }\n    /**\n     * Returns the gutter size, based on gutter width and sizer options.\n     * @param {number} containerWidth Size of the parent container.\n     * @return {number}\n     * @private\n     */\n\n  }, {\n    key: \"_getGutterSize\",\n    value: function _getGutterSize(containerWidth) {\n      var size;\n\n      if (typeof this.options.gutterWidth === 'function') {\n        size = this.options.gutterWidth(containerWidth);\n      } else if (this.options.sizer) {\n        size = getNumberStyle(this.options.sizer, 'marginLeft');\n      } else {\n        size = this.options.gutterWidth;\n      }\n\n      return size;\n    }\n    /**\n     * Calculate the number of columns to be used. Gets css if using sizer element.\n     * @param {number} [containerWidth] Optionally specify a container width if\n     *    it's already available.\n     */\n\n  }, {\n    key: \"_setColumns\",\n    value: function _setColumns() {\n      var containerWidth = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Shuffle.getSize(this.element).width;\n\n      var gutter = this._getGutterSize(containerWidth);\n\n      var columnWidth = this._getColumnSize(containerWidth, gutter);\n\n      var calculatedColumns = (containerWidth + gutter) / columnWidth; // Widths given from getStyles are not precise enough...\n\n      if (Math.abs(Math.round(calculatedColumns) - calculatedColumns) < this.options.columnThreshold) {\n        // e.g. calculatedColumns = 11.998876\n        calculatedColumns = Math.round(calculatedColumns);\n      }\n\n      this.cols = Math.max(Math.floor(calculatedColumns), 1);\n      this.containerWidth = containerWidth;\n      this.colWidth = columnWidth;\n    }\n    /**\n     * Adjust the height of the grid\n     */\n\n  }, {\n    key: \"_setContainerSize\",\n    value: function _setContainerSize() {\n      this.element.style.height = this._getContainerSize() + 'px';\n    }\n    /**\n     * Based on the column heights, it returns the biggest one.\n     * @return {number}\n     * @private\n     */\n\n  }, {\n    key: \"_getContainerSize\",\n    value: function _getContainerSize() {\n      return arrayMax(this.positions);\n    }\n    /**\n     * Get the clamped stagger amount.\n     * @param {number} index Index of the item to be staggered.\n     * @return {number}\n     */\n\n  }, {\n    key: \"_getStaggerAmount\",\n    value: function _getStaggerAmount(index) {\n      return Math.min(index * this.options.staggerAmount, this.options.staggerAmountMax);\n    }\n    /**\n     * Emit an event from this instance.\n     * @param {string} name Event name.\n     * @param {Object} [data={}] Optional object data.\n     */\n\n  }, {\n    key: \"_dispatch\",\n    value: function _dispatch(name) {\n      var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      if (this.isDestroyed) {\n        return;\n      }\n\n      data.shuffle = this;\n      this.emit(name, data);\n    }\n    /**\n     * Zeros out the y columns array, which is used to determine item placement.\n     * @private\n     */\n\n  }, {\n    key: \"_resetCols\",\n    value: function _resetCols() {\n      var i = this.cols;\n      this.positions = [];\n\n      while (i) {\n        i -= 1;\n        this.positions.push(0);\n      }\n    }\n    /**\n     * Loops through each item that should be shown and calculates the x, y position.\n     * @param {ShuffleItem[]} items Array of items that will be shown/layed\n     *     out in order in their array.\n     */\n\n  }, {\n    key: \"_layout\",\n    value: function _layout(items) {\n      var _this4 = this;\n\n      var itemPositions = this._getNextPositions(items);\n\n      var count = 0;\n      items.forEach(function (item, i) {\n        function callback() {\n          item.applyCss(ShuffleItem.Css.VISIBLE.after);\n        } // If the item will not change its position, do not add it to the render\n        // queue. Transitions don't fire when setting a property to the same value.\n\n\n        if (Point.equals(item.point, itemPositions[i]) && !item.isHidden) {\n          item.applyCss(ShuffleItem.Css.VISIBLE.before);\n          callback();\n          return;\n        }\n\n        item.point = itemPositions[i];\n        item.scale = ShuffleItem.Scale.VISIBLE;\n        item.isHidden = false; // Clone the object so that the `before` object isn't modified when the\n        // transition delay is added.\n\n        var styles = _this4.getStylesForTransition(item, ShuffleItem.Css.VISIBLE.before);\n\n        styles.transitionDelay = _this4._getStaggerAmount(count) + 'ms';\n\n        _this4._queue.push({\n          item: item,\n          styles: styles,\n          callback: callback\n        });\n\n        count += 1;\n      });\n    }\n    /**\n     * Return an array of Point instances representing the future positions of\n     * each item.\n     * @param {ShuffleItem[]} items Array of sorted shuffle items.\n     * @return {Point[]}\n     * @private\n     */\n\n  }, {\n    key: \"_getNextPositions\",\n    value: function _getNextPositions(items) {\n      var _this5 = this; // If position data is going to be changed, add the item's size to the\n      // transformer to allow for calculations.\n\n\n      if (this.options.isCentered) {\n        var itemsData = items.map(function (item, i) {\n          var itemSize = Shuffle.getSize(item.element, true);\n\n          var point = _this5._getItemPosition(itemSize);\n\n          return new Rect(point.x, point.y, itemSize.width, itemSize.height, i);\n        });\n        return this.getTransformedPositions(itemsData, this.containerWidth);\n      } // If no transforms are going to happen, simply return an array of the\n      // future points of each item.\n\n\n      return items.map(function (item) {\n        return _this5._getItemPosition(Shuffle.getSize(item.element, true));\n      });\n    }\n    /**\n     * Determine the location of the next item, based on its size.\n     * @param {{width: number, height: number}} itemSize Object with width and height.\n     * @return {Point}\n     * @private\n     */\n\n  }, {\n    key: \"_getItemPosition\",\n    value: function _getItemPosition(itemSize) {\n      return getItemPosition({\n        itemSize: itemSize,\n        positions: this.positions,\n        gridSize: this.colWidth,\n        total: this.cols,\n        threshold: this.options.columnThreshold,\n        buffer: this.options.buffer\n      });\n    }\n    /**\n     * Mutate positions before they're applied.\n     * @param {Rect[]} itemRects Item data objects.\n     * @param {number} containerWidth Width of the containing element.\n     * @return {Point[]}\n     * @protected\n     */\n\n  }, {\n    key: \"getTransformedPositions\",\n    value: function getTransformedPositions(itemRects, containerWidth) {\n      return getCenteredPositions(itemRects, containerWidth);\n    }\n    /**\n     * Hides the elements that don't match our filter.\n     * @param {ShuffleItem[]} collection Collection to shrink.\n     * @private\n     */\n\n  }, {\n    key: \"_shrink\",\n    value: function _shrink() {\n      var _this6 = this;\n\n      var collection = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._getConcealedItems();\n      var count = 0;\n      collection.forEach(function (item) {\n        function callback() {\n          item.applyCss(ShuffleItem.Css.HIDDEN.after);\n        } // Continuing would add a transitionend event listener to the element, but\n        // that listener would not execute because the transform and opacity would\n        // stay the same.\n        // The callback is executed here because it is not guaranteed to be called\n        // after the transitionend event because the transitionend could be\n        // canceled if another animation starts.\n\n\n        if (item.isHidden) {\n          item.applyCss(ShuffleItem.Css.HIDDEN.before);\n          callback();\n          return;\n        }\n\n        item.scale = ShuffleItem.Scale.HIDDEN;\n        item.isHidden = true;\n\n        var styles = _this6.getStylesForTransition(item, ShuffleItem.Css.HIDDEN.before);\n\n        styles.transitionDelay = _this6._getStaggerAmount(count) + 'ms';\n\n        _this6._queue.push({\n          item: item,\n          styles: styles,\n          callback: callback\n        });\n\n        count += 1;\n      });\n    }\n    /**\n     * Resize handler.\n     * @private\n     */\n\n  }, {\n    key: \"_handleResize\",\n    value: function _handleResize() {\n      // If shuffle is disabled, destroyed, don't do anything\n      if (!this.isEnabled || this.isDestroyed) {\n        return;\n      }\n\n      this.update();\n    }\n    /**\n     * Returns styles which will be applied to the an item for a transition.\n     * @param {ShuffleItem} item Item to get styles for. Should have updated\n     *   scale and point properties.\n     * @param {Object} styleObject Extra styles that will be used in the transition.\n     * @return {!Object} Transforms for transitions, left/top for animate.\n     * @protected\n     */\n\n  }, {\n    key: \"getStylesForTransition\",\n    value: function getStylesForTransition(item, styleObject) {\n      // Clone the object to avoid mutating the original.\n      var styles = Object.assign({}, styleObject);\n\n      if (this.options.useTransforms) {\n        var x = this.options.roundTransforms ? Math.round(item.point.x) : item.point.x;\n        var y = this.options.roundTransforms ? Math.round(item.point.y) : item.point.y;\n        styles.transform = \"translate(\".concat(x, \"px, \").concat(y, \"px) scale(\").concat(item.scale, \")\");\n      } else {\n        styles.left = item.point.x + 'px';\n        styles.top = item.point.y + 'px';\n      }\n\n      return styles;\n    }\n    /**\n     * Listen for the transition end on an element and execute the itemCallback\n     * when it finishes.\n     * @param {Element} element Element to listen on.\n     * @param {function} itemCallback Callback for the item.\n     * @param {function} done Callback to notify `parallel` that this one is done.\n     */\n\n  }, {\n    key: \"_whenTransitionDone\",\n    value: function _whenTransitionDone(element, itemCallback, done) {\n      var id = onTransitionEnd(element, function (evt) {\n        itemCallback();\n        done(null, evt);\n      });\n\n      this._transitions.push(id);\n    }\n    /**\n     * Return a function which will set CSS styles and call the `done` function\n     * when (if) the transition finishes.\n     * @param {Object} opts Transition object.\n     * @return {function} A function to be called with a `done` function.\n     */\n\n  }, {\n    key: \"_getTransitionFunction\",\n    value: function _getTransitionFunction(opts) {\n      var _this7 = this;\n\n      return function (done) {\n        opts.item.applyCss(opts.styles);\n\n        _this7._whenTransitionDone(opts.item.element, opts.callback, done);\n      };\n    }\n    /**\n     * Execute the styles gathered in the style queue. This applies styles to elements,\n     * triggering transitions.\n     * @private\n     */\n\n  }, {\n    key: \"_processQueue\",\n    value: function _processQueue() {\n      if (this.isTransitioning) {\n        this._cancelMovement();\n      }\n\n      var hasSpeed = this.options.speed > 0;\n      var hasQueue = this._queue.length > 0;\n\n      if (hasQueue && hasSpeed && this.isInitialized) {\n        this._startTransitions(this._queue);\n      } else if (hasQueue) {\n        this._styleImmediately(this._queue);\n\n        this._dispatch(Shuffle.EventType.LAYOUT); // A call to layout happened, but none of the newly visible items will\n        // change position or the transition duration is zero, which will not trigger\n        // the transitionend event.\n\n      } else {\n        this._dispatch(Shuffle.EventType.LAYOUT);\n      } // Remove everything in the style queue\n\n\n      this._queue.length = 0;\n    }\n    /**\n     * Wait for each transition to finish, the emit the layout event.\n     * @param {Object[]} transitions Array of transition objects.\n     */\n\n  }, {\n    key: \"_startTransitions\",\n    value: function _startTransitions(transitions) {\n      var _this8 = this; // Set flag that shuffle is currently in motion.\n\n\n      this.isTransitioning = true; // Create an array of functions to be called.\n\n      var callbacks = transitions.map(function (obj) {\n        return _this8._getTransitionFunction(obj);\n      });\n      arrayParallel(callbacks, this._movementFinished.bind(this));\n    }\n  }, {\n    key: \"_cancelMovement\",\n    value: function _cancelMovement() {\n      // Remove the transition end event for each listener.\n      this._transitions.forEach(cancelTransitionEnd); // Reset the array.\n\n\n      this._transitions.length = 0; // Show it's no longer active.\n\n      this.isTransitioning = false;\n    }\n    /**\n     * Apply styles without a transition.\n     * @param {Object[]} objects Array of transition objects.\n     * @private\n     */\n\n  }, {\n    key: \"_styleImmediately\",\n    value: function _styleImmediately(objects) {\n      if (objects.length) {\n        var elements = objects.map(function (obj) {\n          return obj.item.element;\n        });\n\n        Shuffle._skipTransitions(elements, function () {\n          objects.forEach(function (obj) {\n            obj.item.applyCss(obj.styles);\n            obj.callback();\n          });\n        });\n      }\n    }\n  }, {\n    key: \"_movementFinished\",\n    value: function _movementFinished() {\n      this._transitions.length = 0;\n      this.isTransitioning = false;\n\n      this._dispatch(Shuffle.EventType.LAYOUT);\n    }\n    /**\n     * The magic. This is what makes the plugin 'shuffle'\n     * @param {string|string[]|function(Element):boolean} [category] Category to filter by.\n     *     Can be a function, string, or array of strings.\n     * @param {Object} [sortObj] A sort object which can sort the visible set\n     */\n\n  }, {\n    key: \"filter\",\n    value: function filter(category, sortObj) {\n      if (!this.isEnabled) {\n        return;\n      }\n\n      if (!category || category && category.length === 0) {\n        category = Shuffle.ALL_ITEMS; // eslint-disable-line no-param-reassign\n      }\n\n      this._filter(category); // Shrink each hidden item\n\n\n      this._shrink(); // How many visible elements?\n\n\n      this._updateItemCount(); // Update transforms on visible elements so they will animate to their new positions.\n\n\n      this.sort(sortObj);\n    }\n    /**\n     * Gets the visible elements, sorts them, and passes them to layout.\n     * @param {Object} [sortOptions] The options object to pass to `sorter`.\n     */\n\n  }, {\n    key: \"sort\",\n    value: function sort() {\n      var sortOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.lastSort;\n\n      if (!this.isEnabled) {\n        return;\n      }\n\n      this._resetCols();\n\n      var items = sorter(this._getFilteredItems(), sortOptions);\n\n      this._layout(items); // `_layout` always happens after `_shrink`, so it's safe to process the style\n      // queue here with styles from the shrink method.\n\n\n      this._processQueue(); // Adjust the height of the container.\n\n\n      this._setContainerSize();\n\n      this.lastSort = sortOptions;\n    }\n    /**\n     * Reposition everything.\n     * @param {boolean} [isOnlyLayout=false] If true, column and gutter widths won't be recalculated.\n     */\n\n  }, {\n    key: \"update\",\n    value: function update() {\n      var isOnlyLayout = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n      if (this.isEnabled) {\n        if (!isOnlyLayout) {\n          // Get updated colCount\n          this._setColumns();\n        } // Layout items\n\n\n        this.sort();\n      }\n    }\n    /**\n     * Use this instead of `update()` if you don't need the columns and gutters updated\n     * Maybe an image inside `shuffle` loaded (and now has a height), which means calculations\n     * could be off.\n     */\n\n  }, {\n    key: \"layout\",\n    value: function layout() {\n      this.update(true);\n    }\n    /**\n     * New items have been appended to shuffle. Mix them in with the current\n     * filter or sort status.\n     * @param {Element[]} newItems Collection of new items.\n     */\n\n  }, {\n    key: \"add\",\n    value: function add(newItems) {\n      var _this9 = this;\n\n      var items = arrayUnique(newItems).map(function (el) {\n        return new ShuffleItem(el);\n      }); // Add classes and set initial positions.\n\n      this._initItems(items); // Determine which items will go with the current filter.\n\n\n      this._resetCols();\n\n      var allItems = this._mergeNewItems(items);\n\n      var sortedItems = sorter(allItems, this.lastSort);\n\n      var allSortedItemsSet = this._filter(this.lastFilter, sortedItems);\n\n      var isNewItem = function isNewItem(item) {\n        return items.includes(item);\n      };\n\n      var applyHiddenState = function applyHiddenState(item) {\n        item.scale = ShuffleItem.Scale.HIDDEN;\n        item.isHidden = true;\n        item.applyCss(ShuffleItem.Css.HIDDEN.before);\n        item.applyCss(ShuffleItem.Css.HIDDEN.after);\n      }; // Layout all items again so that new items get positions.\n      // Synchonously apply positions.\n\n\n      var itemPositions = this._getNextPositions(allSortedItemsSet.visible);\n\n      allSortedItemsSet.visible.forEach(function (item, i) {\n        if (isNewItem(item)) {\n          item.point = itemPositions[i];\n          applyHiddenState(item);\n          item.applyCss(_this9.getStylesForTransition(item, {}));\n        }\n      });\n      allSortedItemsSet.hidden.forEach(function (item) {\n        if (isNewItem(item)) {\n          applyHiddenState(item);\n        }\n      }); // Cause layout so that the styles above are applied.\n\n      this.element.offsetWidth; // eslint-disable-line no-unused-expressions\n      // Add transition to each item.\n\n      this.setItemTransitions(items); // Update the list of items.\n\n      this.items = this._mergeNewItems(items); // Update layout/visibility of new and old items.\n\n      this.filter(this.lastFilter);\n    }\n    /**\n     * Disables shuffle from updating dimensions and layout on resize\n     */\n\n  }, {\n    key: \"disable\",\n    value: function disable() {\n      this.isEnabled = false;\n    }\n    /**\n     * Enables shuffle again\n     * @param {boolean} [isUpdateLayout=true] if undefined, shuffle will update columns and gutters\n     */\n\n  }, {\n    key: \"enable\",\n    value: function enable() {\n      var isUpdateLayout = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      this.isEnabled = true;\n\n      if (isUpdateLayout) {\n        this.update();\n      }\n    }\n    /**\n     * Remove 1 or more shuffle items.\n     * @param {Element[]} elements An array containing one or more\n     *     elements in shuffle\n     * @return {Shuffle} The shuffle instance.\n     */\n\n  }, {\n    key: \"remove\",\n    value: function remove(elements) {\n      var _this10 = this;\n\n      if (!elements.length) {\n        return;\n      }\n\n      var collection = arrayUnique(elements);\n      var oldItems = collection.map(function (element) {\n        return _this10.getItemByElement(element);\n      }).filter(function (item) {\n        return !!item;\n      });\n\n      var handleLayout = function handleLayout() {\n        _this10._disposeItems(oldItems); // Remove the collection in the callback\n\n\n        collection.forEach(function (element) {\n          element.parentNode.removeChild(element);\n        });\n\n        _this10._dispatch(Shuffle.EventType.REMOVED, {\n          collection: collection\n        });\n      }; // Hide collection first.\n\n\n      this._toggleFilterClasses({\n        visible: [],\n        hidden: oldItems\n      });\n\n      this._shrink(oldItems);\n\n      this.sort(); // Update the list of items here because `remove` could be called again\n      // with an item that is in the process of being removed.\n\n      this.items = this.items.filter(function (item) {\n        return !oldItems.includes(item);\n      });\n\n      this._updateItemCount();\n\n      this.once(Shuffle.EventType.LAYOUT, handleLayout);\n    }\n    /**\n     * Retrieve a shuffle item by its element.\n     * @param {Element} element Element to look for.\n     * @return {?ShuffleItem} A shuffle item or undefined if it's not found.\n     */\n\n  }, {\n    key: \"getItemByElement\",\n    value: function getItemByElement(element) {\n      return this.items.find(function (item) {\n        return item.element === element;\n      });\n    }\n    /**\n     * Dump the elements currently stored and reinitialize all child elements which\n     * match the `itemSelector`.\n     */\n\n  }, {\n    key: \"resetItems\",\n    value: function resetItems() {\n      var _this11 = this; // Remove refs to current items.\n\n\n      this._disposeItems(this.items);\n\n      this.isInitialized = false; // Find new items in the DOM.\n\n      this.items = this._getItems(); // Set initial styles on the new items.\n\n      this._initItems(this.items);\n\n      this.once(Shuffle.EventType.LAYOUT, function () {\n        // Add transition to each item.\n        _this11.setItemTransitions(_this11.items);\n\n        _this11.isInitialized = true;\n      }); // Lay out all items.\n\n      this.filter(this.lastFilter);\n    }\n    /**\n     * Destroys shuffle, removes events, styles, and classes\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this._cancelMovement();\n\n      window.removeEventListener('resize', this._onResize); // Reset container styles\n\n      this.element.classList.remove('shuffle');\n      this.element.removeAttribute('style'); // Reset individual item styles\n\n      this._disposeItems(this.items);\n\n      this.items.length = 0;\n      this._transitions.length = 0; // Null DOM references\n\n      this.options.sizer = null;\n      this.element = null; // Set a flag so if a debounced resize has been triggered,\n      // it can first check if it is actually isDestroyed and not doing anything\n\n      this.isDestroyed = true;\n      this.isEnabled = false;\n    }\n    /**\n     * Returns the outer width of an element, optionally including its margins.\n     *\n     * There are a few different methods for getting the width of an element, none of\n     * which work perfectly for all Shuffle's use cases.\n     *\n     * 1. getBoundingClientRect() `left` and `right` properties.\n     *   - Accounts for transform scaled elements, making it useless for Shuffle\n     *   elements which have shrunk.\n     * 2. The `offsetWidth` property.\n     *   - This value stays the same regardless of the elements transform property,\n     *   however, it does not return subpixel values.\n     * 3. getComputedStyle()\n     *   - This works great Chrome, Firefox, Safari, but IE<=11 does not include\n     *   padding and border when box-sizing: border-box is set, requiring a feature\n     *   test and extra work to add the padding back for IE and other browsers which\n     *   follow the W3C spec here.\n     *\n     * @param {Element} element The element.\n     * @param {boolean} [includeMargins=false] Whether to include margins.\n     * @return {{width: number, height: number}} The width and height.\n     */\n\n  }], [{\n    key: \"getSize\",\n    value: function getSize(element) {\n      var includeMargins = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false; // Store the styles so that they can be used by others without asking for it again.\n\n      var styles = window.getComputedStyle(element, null);\n      var width = getNumberStyle(element, 'width', styles);\n      var height = getNumberStyle(element, 'height', styles);\n\n      if (includeMargins) {\n        var marginLeft = getNumberStyle(element, 'marginLeft', styles);\n        var marginRight = getNumberStyle(element, 'marginRight', styles);\n        var marginTop = getNumberStyle(element, 'marginTop', styles);\n        var marginBottom = getNumberStyle(element, 'marginBottom', styles);\n        width += marginLeft + marginRight;\n        height += marginTop + marginBottom;\n      }\n\n      return {\n        width: width,\n        height: height\n      };\n    }\n    /**\n     * Change a property or execute a function which will not have a transition\n     * @param {Element[]} elements DOM elements that won't be transitioned.\n     * @param {function} callback A function which will be called while transition\n     *     is set to 0ms.\n     * @private\n     */\n\n  }, {\n    key: \"_skipTransitions\",\n    value: function _skipTransitions(elements, callback) {\n      var zero = '0ms'; // Save current duration and delay.\n\n      var data = elements.map(function (element) {\n        var style = element.style;\n        var duration = style.transitionDuration;\n        var delay = style.transitionDelay; // Set the duration to zero so it happens immediately\n\n        style.transitionDuration = zero;\n        style.transitionDelay = zero;\n        return {\n          duration: duration,\n          delay: delay\n        };\n      });\n      callback(); // Cause forced synchronous layout.\n\n      elements[0].offsetWidth; // eslint-disable-line no-unused-expressions\n      // Put the duration back\n\n      elements.forEach(function (element, i) {\n        element.style.transitionDuration = data[i].duration;\n        element.style.transitionDelay = data[i].delay;\n      });\n    }\n  }]);\n\n  return Shuffle;\n}(tinyEmitter);\n\nShuffle.ShuffleItem = ShuffleItem;\nShuffle.ALL_ITEMS = 'all';\nShuffle.FILTER_ATTRIBUTE_KEY = 'groups';\n/** @enum {string} */\n\nShuffle.EventType = {\n  LAYOUT: 'shuffle:layout',\n  REMOVED: 'shuffle:removed'\n};\n/** @enum {string} */\n\nShuffle.Classes = Classes;\n/** @enum {string} */\n\nShuffle.FilterMode = {\n  ANY: 'any',\n  ALL: 'all'\n}; // Overrideable options\n\nShuffle.options = {\n  // Initial filter group.\n  group: Shuffle.ALL_ITEMS,\n  // Transition/animation speed (milliseconds).\n  speed: 250,\n  // CSS easing function to use.\n  easing: 'cubic-bezier(0.4, 0.0, 0.2, 1)',\n  // e.g. '.picture-item'.\n  itemSelector: '*',\n  // Element or selector string. Use an element to determine the size of columns\n  // and gutters.\n  sizer: null,\n  // A static number or function that tells the plugin how wide the gutters\n  // between columns are (in pixels).\n  gutterWidth: 0,\n  // A static number or function that returns a number which tells the plugin\n  // how wide the columns are (in pixels).\n  columnWidth: 0,\n  // If your group is not json, and is comma delimeted, you could set delimiter\n  // to ','.\n  delimiter: null,\n  // Useful for percentage based heights when they might not always be exactly\n  // the same (in pixels).\n  buffer: 0,\n  // Reading the width of elements isn't precise enough and can cause columns to\n  // jump between values.\n  columnThreshold: 0.01,\n  // Shuffle can be isInitialized with a sort object. It is the same object\n  // given to the sort method.\n  initialSort: null,\n  // By default, shuffle will throttle resize events. This can be changed or\n  // removed.\n  throttle: throttleit,\n  // How often shuffle can be called on resize (in milliseconds).\n  throttleTime: 300,\n  // Transition delay offset for each item in milliseconds.\n  staggerAmount: 15,\n  // Maximum stagger delay in milliseconds.\n  staggerAmountMax: 150,\n  // Whether to use transforms or absolute positioning.\n  useTransforms: true,\n  // Affects using an array with filter. e.g. `filter(['one', 'two'])`. With \"any\",\n  // the element passes the test if any of its groups are in the array. With \"all\",\n  // the element only passes if all groups are in the array.\n  filterMode: Shuffle.FilterMode.ANY,\n  // Attempt to center grid items in each row.\n  isCentered: false,\n  // Whether to round pixel values used in translate(x, y). This usually avoids\n  // blurriness.\n  roundTransforms: true\n};\nShuffle.Point = Point;\nShuffle.Rect = Rect; // Expose for testing. Hack at your own risk.\n\nShuffle.__sorter = sorter;\nShuffle.__getColumnSpan = getColumnSpan;\nShuffle.__getAvailablePositions = getAvailablePositions;\nShuffle.__getShortColumn = getShortColumn;\nShuffle.__getCenteredPositions = getCenteredPositions;\nexport default Shuffle;"],"sourceRoot":""}